---
import type { SanityAssetDocument } from "@sanity/client";
import { imageBuilder } from "../sanity/lib/url-for-image";
import Picture from "./Picture.astro";

interface Props {
  images: SanityAssetDocument[];
}

const { images } = Astro.props;
---

<div class="gallery-container">
  <div class="masonry-grid" role="grid">
    {
      images.map((image, index) => {
        const isVertical = image.metadata.dimensions.aspectRatio < 1;
        return (
          <div
            class={`masonry-item ${isVertical ? "vertical" : "horizontal"}`}
            data-aspect-ratio={image.metadata.dimensions.aspectRatio}
            tabindex="0"
            aria-label={`Open image ${index + 1} in gallery`}
            role="button"
          >
            <Picture
              url={imageBuilder.image(image).url()}
              dimensions={[1920]}
              alt={image.metadata.alt || `Image ${index + 1}`}
            />
          </div>
        );
      })
    }
  </div>

  <div
    class="lightbox"
    id="lightbox"
    role="dialog"
    aria-modal="true"
    aria-label="Image gallery lightbox"
  >
    <button class="lightbox-close" aria-label="Close gallery">&times;</button>
    <div class="lightbox-nav">
      <button class="prev" aria-label="Previous image">&#8592;</button>
      <button class="next" aria-label="Next image">&#8594;</button>
    </div>
    <div class="lightbox-content" role="img" aria-label="Current image"></div>
  </div>
</div>

<script>
  class Gallery {
    constructor() {
      this.lightbox = document.getElementById("lightbox");
      this.lightboxContent =
        this.lightbox?.querySelector(".lightbox-content") || null;
      this.items = document.querySelectorAll(".masonry-item");
      this.currentIndex = 0;

      this.setupEventListeners();
    }

    setupEventListeners() {
      this.items.forEach((item, index) => {
        item.addEventListener("click", () => this.openLightbox(index));
        item.addEventListener("keydown", (e) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            this.openLightbox(index);
          }
        });
      });

      document
        .querySelector(".lightbox-close")
        ?.addEventListener("click", () => this.closeLightbox());

      document
        .querySelector(".lightbox-nav.prev")
        ?.addEventListener("click", () => this.navigate(-1));

      document
        .querySelector(".lightbox-nav.next")
        ?.addEventListener("click", () => this.navigate(1));

      document.addEventListener("keydown", (e) => {
        if (this.lightbox.classList.contains("active")) {
          if (e.key === "ArrowLeft") this.navigate(-1);
          if (e.key === "ArrowRight") this.navigate(1);
          if (e.key === "Escape") this.closeLightbox();
        }
      });

      this.lightbox.addEventListener("click", (e) => {
        if (e.target === this.lightbox) this.closeLightbox();
      });
    }

    openLightbox(index) {
      this.currentIndex = index;
      this.updateLightboxImage();
      this.lightbox.classList.add("active");
      document.body.style.overflow = "hidden";
    }

    closeLightbox() {
      this.lightbox.classList.remove("active");
      document.body.style.overflow = "";
    }

    navigate(direction) {
      this.currentIndex =
        (this.currentIndex + direction + this.items.length) % this.items.length;
      this.updateLightboxImage();
    }

    updateLightboxImage() {
      const item = this.items[this.currentIndex];
      const img = item.querySelector("img");

      if (img && this.lightboxContent) {
        this.lightboxContent.innerHTML = "";
        const clone = img.cloneNode();
        this.lightboxContent.appendChild(clone);
        this.lightboxContent.setAttribute(
          "aria-label",
          `Image ${this.currentIndex + 1} of ${this.items.length}`
        );
      }
    }
  }

  document.addEventListener("DOMContentLoaded", () => new Gallery());
</script>

<style>
  .gallery-container {
    position: relative;
  }

  .masonry-grid {
    gap: 1rem; /* Uniform gap between rows and columns */
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    align-content: start; /* Prevents stretching */
  }

  @media (min-width: 600px) {
    .masonry-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (min-width: 900px) {
    .masonry-grid {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  @media (min-width: 1200px) {
    .masonry-grid {
      grid-template-columns: repeat(4, 1fr);
    }
  }

  .masonry-item {
    display: block;
    overflow: hidden;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: transform 0.2s ease;
    grid-row: span var(--row-span);
  }

  .masonry-item img {
    width: 100%;
    height: auto;
    object-fit: cover;
  }

  /* Vertical and Horizontal Images */
  .masonry-item.vertical {
    --row-span: 30; /* Adjust based on desired height */
  }

  .masonry-item.horizontal {
    --row-span: 15; /* Adjust based on desired height */
  }

  .masonry-item:hover {
    transform: scale(1.02);
  }

  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }

  .lightbox.active {
    display: flex;
  }

  .lightbox-nav {
    display: flex;
    justify-content: space-between;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
  }

  .lightbox-nav button {
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    padding: 1rem;
  }

  .lightbox-nav.prev {
    left: 1rem;
  }

  .lightbox-nav.next {
    right: 1rem;
  }

  .lightbox-content {
    max-width: 90%;
    max-height: 90vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox img {
    width: 100%;
    height: 100%;
    display: block;
    border-radius: 4px;
    object-fit: contain; /* Changed from 'cover' to 'contain' to make the image larger */
  }

  .lightbox-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }

  @media (min-width: 600px) {
    .lightbox-content {
      width: 100%;
    }
  }
</style>
