---
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { imageBuilder } from "../sanity/lib/url-for-image";
import SanityPicture from "astro-sanity-picture";
import type { SanityAssetDocument } from "@sanity/client";
import Picture from "./Picture.astro";

interface Props {
  images: SanityAssetDocument[];
}

const { images } = Astro.props;

// Enhanced gap-avoiding algorithm with better distribution
const calculateOptimalColumns = (images: SanityAssetDocument[]) => {
  let bestScore = Infinity;
  let optimalColumns = 3;
  let bestLayout: number[] = [];

  // Try different column counts
  for (let cols = 2; cols <= 4; cols++) {
    const rows: number[] = Array(cols).fill(0);
    const layout: number[] = [];
    let gaps = 0;
    let consecutiveWideImages = 0;

    // Sort images by aspect ratio and size
    const sortedImages = [...images].sort((a, b) => {
      const ratioA = a.width / a.height;
      const ratioB = b.width / b.height;
      const sizeA = a.width * a.height;
      const sizeB = b.width * b.height;

      // Prioritize wide images and larger images
      if (Math.abs(ratioA - ratioB) > 0.5) {
        return ratioB - ratioA;
      }
      return sizeB - sizeA;
    });

    // Place images
    for (let i = 0; i < sortedImages.length; i++) {
      const file = sortedImages[i];
      const ratio = file.width / file.height;
      const colSpan = ratio > 1.5 ? 2 : 1;
      const rowSpan = ratio < 0.8 ? 2 : 1;

      // Handle 2-column layout differently
      if (cols === 2) {
        if (colSpan === 2) {
          consecutiveWideImages++;
          if (consecutiveWideImages > 2) {
            layout.push(1);
            for (let j = 0; j < 1; j++) {
              const minCol = rows.indexOf(Math.min(...rows));
              rows[minCol] += rowSpan;
            }
            continue;
          }
        } else {
          consecutiveWideImages = 0;
        }
      }

      // Find optimal position
      let bestPosition = 0;
      let bestScore = Infinity;

      for (let pos = 0; pos <= cols - colSpan; pos++) {
        const positionScore = calculatePositionScore(
          rows,
          pos,
          colSpan,
          rowSpan
        );
        if (positionScore < bestScore) {
          bestScore = positionScore;
          bestPosition = pos;
        }
      }

      // Update layout
      layout.push(colSpan);
      for (let j = 0; j < colSpan; j++) {
        rows[bestPosition + j] += rowSpan;
      }

      // Check for gaps
      if (colSpan === 2) {
        const remainingSpace = cols - (bestPosition + colSpan);
        if (remainingSpace === 1) {
          // Look ahead to see if we can fill the gap
          const nextImage = sortedImages[i + 1];
          if (!nextImage || nextImage.width / nextImage.height > 1.2) {
            gaps++;
          }
        }
      }
    }

    // Calculate final score
    const avgHeight = rows.reduce((a, b) => a + b, 0) / cols;
    const heightVariance = rows.reduce(
      (acc, height) => acc + Math.abs(height - avgHeight),
      0
    );
    const score = gaps * 3 + heightVariance + Math.max(...rows) * 0.5;

    if (score < bestScore) {
      bestScore = score;
      optimalColumns = cols;
      bestLayout = layout;
    }
  }

  return optimalColumns;
};

function calculatePositionScore(
  rows: number[],
  position: number,
  colSpan: number,
  rowSpan: number
): number {
  const affectedRows = rows.slice(position, position + colSpan);
  const currentHeight = Math.max(...affectedRows);
  const variance = Math.max(...rows) - Math.min(...rows);

  return currentHeight + variance * 0.5;
}

// TODO: fix this
const getImageSize = (image: SanityAssetDocument) => {
  const ratio =
    image.metadata.dimensions.width / image.metadata.dimensions.height;
  const rowSpan = ratio < 0.8 ? 2 : 1; // Adjusted threshold

  if (ratio > 1.7) return `horizontal span-${rowSpan}`;
  if (ratio < 0.7) return `vertical span-${rowSpan}`;
  if (ratio >= 0.95 && ratio <= 1.05) return `large span-${rowSpan}`;
  return `medium span-${rowSpan}`;
};

const optimalColumns = calculateOptimalColumns(images);
---

<div class="gallery-container">
  <div class="masonry-grid" style={`--columns: ${optimalColumns}`} role="grid">
    {
      images.map((image, index) => (
        <div
          class={`masonry-item ${getImageSize(image)}`}
          data-index={index}
          role="button"
          tabindex="0"
          aria-label={`Open image ${index + 1} in gallery`}
        >
          <Picture
            url={imageBuilder.image(image).url()}
            dimensions={[400, 800, 1200]}
          />
        </div>
      ))
    }
  </div>

  <div
    class="lightbox"
    id="lightbox"
    role="dialog"
    aria-modal="true"
    aria-label="Image gallery lightbox"
  >
    <button class="lightbox-close" aria-label="Close gallery">×</button>
    <button class="lightbox-nav prev" aria-label="Previous image">←</button>
    <button class="lightbox-nav next" aria-label="Next image">→</button>
    <div class="lightbox-content" role="img" aria-label="Current image"></div>
  </div>
</div>

<script>
  class Gallery {
    private lightbox: HTMLElement | null;
    private lightboxContent: HTMLElement | null;
    private items: NodeListOf<HTMLElement>;
    private currentIndex: number;
    private totalItems: number;
    private cleanup: (() => void)[];

    constructor() {
      this.lightbox = document.getElementById("lightbox");
      this.lightboxContent =
        this.lightbox?.querySelector(".lightbox-content") || null;
      this.items = document.querySelectorAll(".masonry-item");
      this.currentIndex = 0;
      this.totalItems = this.items.length;
      this.cleanup = [];

      this.init();
    }

    private init() {
      this.setupEventListeners();
    }

    private showImage(index: number) {
      if (!this.lightbox || !this.lightboxContent) return;

      this.currentIndex = (index + this.totalItems) % this.totalItems;
      const currentItem = this.items[this.currentIndex];
      if (!currentItem) return;

      const img = currentItem.querySelector("img");
      if (!img) return;

      this.lightboxContent.innerHTML = "";
      const newImg = img.cloneNode(true) as HTMLImageElement;
      newImg.removeAttribute("loading");
      this.lightboxContent.appendChild(newImg);

      // Update aria-label with current image index
      this.lightboxContent.setAttribute(
        "aria-label",
        `Image ${this.currentIndex + 1} of ${this.totalItems}`
      );
    }

    private closeLightbox = () => {
      this.lightbox?.classList.remove("active");
      document.body.style.overflow = "";
    };

    private handleKeydown = (e: KeyboardEvent) => {
      if (!this.lightbox?.classList.contains("active")) return;

      switch (e.key) {
        case "ArrowLeft":
          this.showImage(this.currentIndex - 1);
          break;
        case "ArrowRight":
          this.showImage(this.currentIndex + 1);
          break;
        case "Escape":
          this.closeLightbox();
          break;
      }
    };

    private handleItemClick = (item: HTMLElement) => {
      if (!this.lightbox) return;
      this.currentIndex = parseInt(item.getAttribute("data-index") || "0");
      this.showImage(this.currentIndex);
      this.lightbox.classList.add("active");
      document.body.style.overflow = "hidden"; // Prevent background scrolling
    };

    private handleLightboxClick = (e: MouseEvent) => {
      // Close if clicking on the background (lightbox itself) or close button
      if (
        e.target === this.lightbox ||
        (e.target as HTMLElement).closest(".lightbox-close")
      ) {
        this.closeLightbox();
      }
    };

    private setupEventListeners() {
      // Item click events
      this.items.forEach((item) => {
        const clickHandler = () => this.handleItemClick(item);
        const keyHandler = (e: KeyboardEvent) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            this.handleItemClick(item);
          }
        };

        item.addEventListener("click", clickHandler);
        item.addEventListener("keydown", keyHandler);

        this.cleanup.push(() => {
          item.removeEventListener("click", clickHandler);
          item.removeEventListener("keydown", keyHandler);
        });
      });

      // Navigation events
      if (this.lightbox) {
        this.lightbox.addEventListener("click", this.handleLightboxClick);
        const prevButton = this.lightbox.querySelector(".prev");
        const nextButton = this.lightbox.querySelector(".next");

        prevButton?.addEventListener("click", (e) => {
          e.stopPropagation();
          this.showImage(this.currentIndex - 1);
        });

        nextButton?.addEventListener("click", (e) => {
          e.stopPropagation();
          this.showImage(this.currentIndex + 1);
        });

        this.cleanup.push(() => {
          this.lightbox?.removeEventListener("click", this.handleLightboxClick);
          prevButton?.removeEventListener("click", () => {});
          nextButton?.removeEventListener("click", () => {});
        });
      }

      // Keyboard navigation
      document.addEventListener("keydown", this.handleKeydown);
      this.cleanup.push(() => {
        document.removeEventListener("keydown", this.handleKeydown);
      });
    }

    public destroy() {
      this.cleanup.forEach((cleanup) => cleanup());
    }
  }

  // Initialize gallery
  const gallery = new Gallery();

  // Cleanup on page navigation
  document.addEventListener("astro:before-swap", () => {
    gallery.destroy();
  });
</script>

<style>
  .gallery-container {
    position: relative;
  }

  .masonry-grid {
    --gap: 1rem;
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--gap);
    padding: var(--gap);
    grid-auto-rows: 200px;
    grid-auto-flow: dense;
  }

  .masonry-item {
    position: relative;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .masonry-item:hover {
    transform: scale(1.02);
  }

  .masonry-item:focus-visible {
    outline: 3px solid #007bff;
    outline-offset: 2px;
  }

  /* Row spans */
  .masonry-item.span-1 {
    grid-row: span 1;
  }

  .masonry-item.span-2 {
    grid-row: span 2;
  }

  /* Column variations */
  .masonry-item.medium {
    grid-column: span 1;
  }

  .masonry-item.large {
    grid-column: span 2;
  }

  .masonry-item.vertical {
    grid-column: span 1;
  }

  .masonry-item.horizontal {
    grid-column: span 2;
  }

  .masonry-item :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border-radius: 4px;
    transition: opacity 0.3s ease-in-out;
  }

  .masonry-item :global(img.astro-image-loading) {
    opacity: 0;
  }

  /* Lightbox styles */
  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(8px);
    z-index: 1000;
    padding: 2rem;
  }

  .lightbox.active {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .lightbox-content {
    max-width: 90vw;
    max-height: 90vh;
    position: relative;
  }

  .lightbox-content img {
    max-width: 100%;
    max-height: 90vh;
    object-fit: contain;
    border-radius: 4px;
  }

  .lightbox-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    z-index: 1001;
    padding: 0.5rem;
  }

  .lightbox-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: white;
    font-size: 2rem;
    cursor: pointer;
    z-index: 1001;
    padding: 1rem;
  }

  .lightbox-nav.prev {
    left: 1rem;
  }

  .lightbox-nav.next {
    right: 1rem;
  }

  .lightbox-close,
  .lightbox-nav {
    transition: opacity 0.2s ease;
  }

  .lightbox-close:hover,
  .lightbox-nav:hover {
    opacity: 0.8;
  }

  .lightbox-close:focus-visible,
  .lightbox-nav:focus-visible {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  @media (max-width: 1200px) {
    .masonry-grid {
      --columns: 2;
      grid-auto-rows: 250px;
    }
  }

  @media (max-width: 640px) {
    .masonry-grid {
      --gap: 0.75rem;
      --columns: 2;
      grid-auto-rows: 150px;
    }

    .masonry-item.large,
    .masonry-item.horizontal {
      grid-column: span 1;
    }

    .lightbox {
      padding: 1rem;
    }

    .lightbox-nav {
      font-size: 1.5rem;
      padding: 0.5rem;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .lightbox {
      background-color: rgba(0, 0, 0, 0.75);
    }
  }
</style>
